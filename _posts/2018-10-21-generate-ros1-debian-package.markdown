---
layout:     post
title:      "【ROS1总结】使用bloom-generat打包ROS包生成debian安装包"
subtitle:   "ROS debian package generated by using bloom-generate"
date:       2018-10-21 17:38:25
author:     "Playfish"
header-img: "img/in-post/generate-ros1-debian-package/rosdebian.png"
header-mask: 0.3
catalog:    true
tags:
    - ROS1
    - Release
    - package
    - debian
---


> 说明:<br><br>
> 本文首发于 [Playfish Blog](http://carlzhang.club/2018/10/21/generate-ros1-debian-package/)，转载请保留链接。

## 前言

在之前的博客中，介绍了ROS包的编写，在本节中将讲述如何将之前写的ROS包打包成debian安装包形式，打包成debian安装包形式有很多，例如：

 * 将ros包开源至github，利用ros自动生成到构建仓库(buildform)
 * 在本地将ros包打包成debian，不需要上传到github

方法一在以前博客中已经描述过，大家可以查看博客[发布ROS1包到ROS版本](http://carlzhang.club/2018/04/22/releaseros1-into-rosdistro/)，或者[发布ROS2到ROS版本](http://carlzhang.club/2018/04/25/releaseros2-into-rosdistro/)。

通常有时候为了项目的安全性，有时候并不想发布到ROS中，在此我们将讲述第二中方法，也就是在本地将ROS打包成debian形式，方法二也有几种方式：
 * 将生成的install目录按照debian格式放到DEBIAN目录中，使用dpkg -b形式打包
 * 使用checkinstall进行打包
 * 使用ROS提供的bloom-generate进行打包
 ...
 
方法不唯一，在此使用bloom-generate进行打包，方式很简单，在此我们进行示例讲解

## 编写例程

为了使用bloom-generate，首先得有ROS包，在讲解之前，首先进行声明，有时候在项目或者个人代码中，或多或少会用到自定义消息，而使用bloom-generate形式来打包包含自定义消息文件时，会提示出错，因此，本教程将包含自定义消息来进行打包。

也就是说，教程中会打两个ROS debian包，一个是自定义消息包，另一个是依赖自定义消息包的节点包。

之前写的ROS包由于没有包含自定义消息包，所以不使用以前教程节点包，在此重新编写一个包含自定义消息包的节点包：
该例程应该有如下功能，改写ROS教程talker，将talker包含自定义消息，说明如下：
 * 自定义消息包(test_msgs)：该消息包为自定义消息包，主要服务于测试节点
 * 测试节点(test_node)：该节点宝依赖自定义消息包，提供包含自定义消息的话题。
 
该代码已上传至github，大家可以自行下载，链接为：https://github.com/Playfish/test_msgs
该存储库包含两个ROS包，也就是上面所说，自定义消息包(test_msgs)、测试节点(test_node)

在此就不在粘贴代码，在catkin_ws/src下运行如下命令：
```
git clone https://github.com/Playfish/test_msgs
```

## 编译

下载完成后，运行如下命令，进行编译：
```
cd ~/catkin_ws/src/
catkin_make
source devel/setup.bash
```

## 安装bloom-generate

运行如下命令进行安装：
```
sudo apt-get install python-bloom fakeroot
```

## 打包自定义消息

切换到```test_msgs```目录下：
```
roscd test_msgs
bloom-generate rosdebian --os-name ubuntu --ros-distro kinetic 
```
![](/img/in-post/generate-ros1-debian-package/bloom-generate-test-msgs.png)
运行完以上命令后，你将在当前目录下得到一个名为```debian```目录，该目录包含创建debian所需的编译文件以及规则，使用如下命令进行打包：
```
fakeroot debian/rules binary
```
完成后，将在上一级目录得到安装包，名为```ros-kinetic-test-msgs_0.0.0-0xenial_amd64.deb ```
![](/img/in-post/generate-ros1-debian-package/test-msgs-debian.png)

安装该自定义消息包到ROS环境中，用于依赖该消息包的test_node包生成debian。
```
sudo dpkg -i ~/catkin_ws/src/test_msgs/ros-kinetic-test-msgs_0.0.0-0xenial_amd64.deb
```
## 链接自定义消息到ROS依赖

在所以位置编写```rosdep.yaml```，以本教程为例，在~/.ros/目录下创建```rosdep.yaml```，该文件内容如下：
```
test-msgs:
  ubuntu: [ros-kinetic-test-msgs]
```
注意： 该格式要求比较严格，应按照以上格式来。

编写完成后，将该文件连接到rosdep索引中，即在```/etc/ros/rosdep/sources.list.d/```目录下添加一个名为``` 50-my-default.list ```文件，文件内容如下：
```
yaml file:///home/ubuntu/.ros/rosdep.yaml
```
其中，file指向的是以上编写的rosdep.yaml路径，ubuntu为用户名，替换成你自己的。
![](/img/in-post/generate-ros1-debian-package/etc-rosdep.png)

完成后，更新索引，将自定义消息加载到ros软件列表：
```
rosdep update
```

## 生成test_node安装包

上几步已经将自定义的消息安装到ROS环境中，并向ROS软件列表添加该包的索引，如果没有进行以上操作，在运行以下步骤中，将会得到索引不到test_msgs包的位置，进而无法生成安装包。
这样，就可以将依赖该消息包的节点包进行打包操作：
```
roscd test_node
bloom-generate rosdebian --os-name ubuntu --ros-distro kinetic
fakeroot debian/rules binary
```
以上操作完成后，将会在上一级目录生成名为```ros-kinetic-test-node_0.0.0-0xenial_amd64.deb```

生成后，可以通过以下形式安装ros包：
```
sudo dpkg -i ros-kinetic-test-node_0.0.0-0xenial_amd64.deb
```
这样，就可以将安装包发送给别人进行安装，而不需要发布到ROS构建工厂中，保证了私密性。

