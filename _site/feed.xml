<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Playfish Blog</title>
    <description>关于个人成长历程、ROS设计 | Carl Zhang，About personal growth, ROS designer. | 这里是 @Playfish 的个人博客，与你一起发现更大的世界。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 13 May 2018 08:26:08 -0700</pubDate>
    <lastBuildDate>Sun, 13 May 2018 08:26:08 -0700</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>【ROS总结】发布ROS2包到ROS版本</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;说明:&lt;br /&gt;&lt;br /&gt;
本文首发于 &lt;a href=&quot;https://blog.csdn.net/u011118482/article/details/80075689&quot;&gt;CSDN&lt;/a&gt;，转载请保留链接。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在上一总结中，讲述了如何将&lt;a href=&quot;https://blog.csdn.net/u011118482/article/details/80039148&quot;&gt;ROS1的包发布到ROS版本&lt;/a&gt;（Indigo、jade、kinetic、lunar等），在这一节中，讲述如何把ROS2的包发送到ROS社区，比如发布到ROS2版本（ardent）。&lt;/p&gt;

&lt;p&gt;这个页面描述了如何准备在公共ROS 2 buildfarm上发布存储库。在你创建了一个包之后，这是将你的包引入到公开可用的Debian软件包(即：你将能够通过apt-get安装包。这个页面包含了ROS 2特定的指令，它取代了在ROS Wiki上的&lt;a href=&quot;http://wiki.ros.org/cn/bloom/Tutorials/FirstTimeRelease&quot;&gt;Bloom发布教程的第2部分&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;注意：早期的ROS 2版本的发布过程主要依赖于&lt;code class=&quot;highlighter-rouge&quot;&gt;git-bloom-release&lt;/code&gt;的子命令&lt;code class=&quot;highlighter-rouge&quot;&gt;bloom-release&lt;/code&gt;，而不是完整的开放版本工作流，所以可能会有问题。&lt;/p&gt;

&lt;h2 id=&quot;对比ros1-bloom不同&quot;&gt;对比ROS1 bloom不同&lt;/h2&gt;

&lt;p&gt;如果你在ROS1之前使用bloom发布过ROS包，ROS2的先决条件和ROS1差不多。然而，ROS 2还没有为你自动进行标记和版本控制的工具（没有等价于&lt;code class=&quot;highlighter-rouge&quot;&gt;catkin_create_changelog&lt;/code&gt;工具）。&lt;/p&gt;

&lt;h3 id=&quot;要求工具&quot;&gt;要求工具&lt;/h3&gt;

&lt;p&gt;对于ROS2的Ardent来说：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bloom &amp;gt;= 0.6.2&lt;/li&gt;
  &lt;li&gt;catkin_pkg &amp;gt;= 0.4.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;过程&quot;&gt;过程&lt;/h3&gt;

&lt;h4 id=&quot;第一步changelog可选&quot;&gt;第一步：changelog（可选）&lt;/h4&gt;

&lt;p&gt;创建/更新CHANGELOG.rst，使用即将到来的新格式。注意，changelog严格来说是可选的，但它是非常推荐的。&lt;/p&gt;

&lt;p&gt;注意你的changelog格式中的错误可能会导致你的包发布问题。提交并将更改提交给变更日志。&lt;/p&gt;

&lt;h4 id=&quot;第二步标记包版本号&quot;&gt;第二步：标记包版本号&lt;/h4&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;package.xml&amp;gt;&lt;/code&gt;中更新包的版本。版本号必须比前一个版本高。对于你的第一个版本，我们建议0.0.1或1.0.0。提交并推动这个变更。&lt;/p&gt;

&lt;p&gt;注意，你不能使用以前使用的版本号(参见下面)。一些包释放到ROS 1和ROS 2，但是由于这个需求，必须使用不同的版本控制系列。ROS包通常不遵循严格的&lt;a href=&quot;https://semver.org/&quot;&gt;语义版本&lt;/a&gt;控制，所以不要过分担心。如果你想了解其他人已经做了什么，请使用ROS 1发布包中的0.x.x或1.x.x系列和ROS 2发布包中的1.x.x或2.x.x系列。&lt;/p&gt;

&lt;h4 id=&quot;第三步标记你的包&quot;&gt;第三步：标记你的包&lt;/h4&gt;

&lt;p&gt;创建一个与你刚刚输入到package.xml中的版本号相匹配的标记，在提交时，会遇到版本号。现在你知道了不能重用版本号的原因——git只允许在存储库中使用给定名称的一个标记。&lt;/p&gt;

&lt;h4 id=&quot;第四步确保你的bloom和catkin_pkg是最新版本&quot;&gt;第四步：确保你的bloom和catkin_pkg是最新版本&lt;/h4&gt;

&lt;p&gt;查看以上版本要求，运行以下命令追踪当前版本：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-catkin-pkg python-bloom 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;第五步设置ros-2环境变量&quot;&gt;第五步：设置ROS 2环境变量&lt;/h4&gt;

&lt;p&gt;ROS 2使用的是全新的存储库，该版本的所有索引保存在https://github.com/ros2/rosdistro，forked该存储库。你可以通过设置ROSDISTRO_INDEX_URL环境变量来配置bloom。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export ROSDISTRO_INDEX_URL='https://raw.githubusercontent.com/ros2/rosdistro/ros2/index.yaml'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;导出这个之后，你将能够在你的bloom-release终端命令中使用ROS 2发行版的&lt;code class=&quot;highlighter-rouge&quot;&gt;ardent&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bouncy&lt;/code&gt;等名称。&lt;/p&gt;

&lt;h3 id=&quot;下一步&quot;&gt;下一步&lt;/h3&gt;

&lt;p&gt;现在，你的存储库设置完毕。你已经手动完成ROS 2在&lt;a href=&quot;http://wiki.ros.org/cn/bloom/Tutorials/PrepareUpstream&quot;&gt;这个界面&lt;/a&gt;的内容&lt;/p&gt;

&lt;p&gt;返回到ROS Wiki上的&lt;a href=&quot;http://wiki.ros.org/cn/bloom/Tutorials/FirstTimeRelease&quot;&gt;Bloom发布&lt;/a&gt;教程，并继续“创建一个发布存储库”。&lt;/p&gt;

</description>
        <pubDate>Wed, 25 Apr 2018 04:40:44 -0700</pubDate>
        <link>http://localhost:4000/2018/04/25/releaseros2-into-rosdistro/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/25/releaseros2-into-rosdistro/</guid>
        
        <category>ROS2</category>
        
        <category>Release</category>
        
        
      </item>
    
      <item>
        <title>【ROS总结】发布ROS1包之文档编写</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;说明:&lt;br /&gt;&lt;br /&gt;
本文首发于 &lt;a href=&quot;https://blog.csdn.net/u011118482/article/details/80041201&quot;&gt;CSDN&lt;/a&gt;，转载请保留链接。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;在上一节中，讲述了如何发布一个包到ROS社区，这一节将讲述，如何在wiki界面编写ROS包说明文档、教程。&lt;/p&gt;

&lt;p&gt;步骤如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;登录wiki官网，创建界面编辑账号&lt;/li&gt;
  &lt;li&gt;向ROS社区提交wiki页面编辑权限，取得白名单&lt;/li&gt;
  &lt;li&gt;编辑ROS包文档&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;创建wiki账号&quot;&gt;创建wiki账号&lt;/h2&gt;

&lt;p&gt;登录wiki.ros.org，选择登录，创建账户&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/release-ros1-with-document/wiki_login.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入用户名密码
&lt;img src=&quot;/img/in-post/release-ros1-with-document/wiki_create_account.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建完成后，选择登录，登录成功会将显示：
&lt;img src=&quot;/img/in-post/release-ros1-with-document/wiki_whitelists.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击界面获取白名单。&lt;/p&gt;

&lt;h2 id=&quot;wiki白名单&quot;&gt;wiki白名单&lt;/h2&gt;

&lt;p&gt;在github上，登录当前github账号，在白名单注册界面：https://github.com/ros-infrastructure/roswiki/issues/139&lt;/p&gt;

&lt;p&gt;发布请求，比如我的wiki用户为playfish，输入，comment即可。
&lt;img src=&quot;/img/in-post/release-ros1-with-document/get_whitelists.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果一切正常，大家可以登录http://wiki.ros.org/UserGroup，查看自己的名字是否加入。&lt;/p&gt;

&lt;h2 id=&quot;编辑文档&quot;&gt;编辑文档&lt;/h2&gt;

&lt;p&gt;现在编写自己ROS包的使用文档，该文档地址应当在package.xml里面表明，比如我的cht10_node包的package.xml地址为：
&lt;img src=&quot;/img/in-post/release-ros1-with-document/package_xml.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此，输入当前第一个网址 http://ros.org/wiki/cht10_node&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/release-ros1-with-document/package_template.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击packageTemplate，来创建界面。
&lt;img src=&quot;/img/in-post/release-ros1-with-document/write_wiki.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在packageHeader中添加自己的cht10_node包名，该界面会自动链接到cht10_node包。&lt;/p&gt;

&lt;p&gt;创建完成后，即可生成界面，文档编辑结束。&lt;/p&gt;

</description>
        <pubDate>Sun, 22 Apr 2018 11:35:30 -0700</pubDate>
        <link>http://localhost:4000/2018/04/22/releaseros1-with-document/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/22/releaseros1-with-document/</guid>
        
        <category>ROS1</category>
        
        <category>Release</category>
        
        <category>Document</category>
        
        <category>wiki</category>
        
        
      </item>
    
      <item>
        <title>【ROS总结】发布ROS1包到ROS版本</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;说明:&lt;br /&gt;&lt;br /&gt;
本文首发于 &lt;a href=&quot;https://blog.csdn.net/u011118482/article/details/80039148&quot;&gt;CSDN&lt;/a&gt;，转载请保留链接。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在ROS开发过程中，想要发布自己的包贡献到ROS社区，也就是想要自己的包可以通过apt-get的形式进行下载，这样可以避免每次源码编译的时候会遇到很多坑的情况，不过想要发布ROS包到ROS社区需要如下能力：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;长期维护能力：ROS包会一直迭代更新，因此自己的包也应具有长期维护能力，当然，稳定版本后可以不用长期维护。&lt;/li&gt;
  &lt;li&gt;开源精神：因为ROS包遵循BSD协议，会要求将包开源后才可以上传到ROS社区，所以将自己的包发布到ROS社区，最好有开源精神。&lt;/li&gt;
  &lt;li&gt;文档更新：包的更新也伴随这文档更新，当然也不是绝对的，不过最好有包的使用文档，也就是wiki上。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果以上的可以做到，那么，恭喜你，可以作为开源成员加入到ROS大家庭来，开源自己代码，共享社区。&lt;/p&gt;

&lt;p&gt;本教程只是单纯的介绍如何发布自己的包到ROS社区，并且，发布后如何通过apt-get获取下载，关于文档界面编写，也就是wiki说明，会在后面进行说明。&lt;/p&gt;

&lt;p&gt;一般发布自己ROS包有如下步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;具有github账号与要发布的存储库地址，发布存储库(bloom-release生成的包路径)，wiki白名单(文档界面做准备)&lt;/li&gt;
  &lt;li&gt;发布前准备工作，bloom安装(ROS1推荐使用bloom-release进行一键操作)&lt;/li&gt;
  &lt;li&gt;同步到ROS社区&lt;/li&gt;
  &lt;li&gt;等待ROS社区的ROS包版本迭代&lt;/li&gt;
  &lt;li&gt;编辑wiki文档教程&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上步骤完成后，就可以进行apt-get形式下载自己的包了。假如自己的包为cht10_node，那么可以使用如下命令进行安装：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install ros-&amp;lt;rosdistro&amp;gt;-cht10-node 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中将&lt;rosdistro&gt;替换成自己的ROS版本，也就是自己的包发布到的ROS版本中，比如自己的包发布到了kinetic中，那么就是：&lt;/rosdistro&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo  apt-get  install ros-kinetic-cht10-node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意：并不是自己把包发布到ROS社区就等于所有的ROS版本都可以下载，只有发布到对应ROS版本才可以。也就是说要想把自己的包发布到ROS所有版本，必须把自己的包发布到所有的版本中，比如Indigo、Jade、Kinetic、Luna、Melodic中。&lt;/p&gt;

&lt;p&gt;ROS发布需要bloom-release包，我已经将ROS的bloom-release包如何使用翻译到wiki上，大家可以查看教程&lt;/p&gt;

&lt;p&gt;http://wiki.ros.org/cn/bloom&lt;/p&gt;

&lt;p&gt;或者查看英文教程：&lt;/p&gt;

&lt;p&gt;http://wiki.ros.org/bloom&lt;/p&gt;

&lt;p&gt;以后会编写如何发布ROS2的包到ROS社区教程。&lt;/p&gt;

&lt;p&gt;大家也可以看Mastering ROS for Robotics Programming中的Maintaining the ROS package 部分。&lt;/p&gt;

&lt;p&gt;Mastering ROS for Robotics Programming书籍下载：https://download.csdn.net/download/u011118482/10402380 (包含英文和中文翻译)。&lt;/p&gt;

&lt;p&gt;没有0积分下载，大家也可以进入ROS群进行下载。&lt;/p&gt;

&lt;h2 id=&quot;发布前的准备&quot;&gt;发布前的准备&lt;/h2&gt;

&lt;h3 id=&quot;创建github存储库&quot;&gt;创建github存储库&lt;/h3&gt;

&lt;p&gt;登录http://github.com/，创建自己的github账号，创建完成后，创建要发布的ROS存储库，例如包名为之前教程的cht10_node，那么创建cht10_node目录。&lt;/p&gt;

&lt;p&gt;我的存储库为：https://github.com/Playfish/cht10_node&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/cht10_repo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;创建完成后，上传自己的代码到github的cht10_node存储库中。完成如上图。&lt;/p&gt;

&lt;p&gt;注意：发布ROS包应有如下内容，否则无法发布：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CHANGELOG.rst：必须有该文件，该文件内容，可以查看我写的，格式一般为包+版本(日期)+分隔符+修订日志&lt;/li&gt;
  &lt;li&gt;package.xml：内容必须有maintainer子项，版本号必须与CHANGELOG中的版本一致，比如都为0.0.1，包名也一样。&lt;/li&gt;
  &lt;li&gt;tag：版本标记。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生成tag用于以下发布ROS包追踪：&lt;/p&gt;

&lt;p&gt;点击当前界面上的release按钮，创建一个release tag：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/cht10_release.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;保存。&lt;/p&gt;

&lt;h3 id=&quot;创建github-release存储库&quot;&gt;创建github release存储库&lt;/h3&gt;

&lt;p&gt;创建要发布的ROS完成后，为ROS包创建生成的release存储库，我创建的名为cht10_node_release，最好创建为包名_release。这个存储库为空即可，必须勾选初始化ReadeMe.md选项，生成的包版本更新日志将存放在这里。
&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/cht10_release_repo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成后即可，不用再管这个存储库，后期发布完成后，可以查看内容。&lt;/p&gt;
&lt;h3 id=&quot;fork-ros社区版本包存储库&quot;&gt;fork ROS社区版本包存储库&lt;/h3&gt;

&lt;p&gt;保证自己的github账号处于登录状态，点击：http://github.com/ros/rosdistro 。随后点击fork。
&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/fork_rosdistro.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成后，可以看到自己有了rosdistro存储库：
&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/playfish_rosdistro.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;发布ros包&quot;&gt;发布ROS包&lt;/h2&gt;
&lt;p&gt;发布前的准备完成后，在自己的Ubuntu下，安装bloom_release包，安装命令如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-bloom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装完成后，使用如下命令进行发布：&lt;/p&gt;

&lt;p&gt;以下配置只会在第一次产生。&lt;/p&gt;

&lt;p&gt;运行以下命令进行发布与配置ROS Release包，比如把cht10_node发布到kinetic版本上：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bloom-release --rosdistro kinetic --track kinetic cht10_node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中–rosdistro后的选项为发布到kinetic版本，–track选项为追踪选项，默认为ROS分布式版本，最后的cht10_node为当前存储库名称。&lt;/p&gt;

&lt;p&gt;运行命令产生如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/release_0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入之前创建的发布的release存储库：https://github.com/Playfish/cht10_node_release.git&lt;/p&gt;

&lt;p&gt;选择Y确定创建追踪。
&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/release_1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入当前存储库名称：cht10_node&lt;/p&gt;

&lt;p&gt;输入当前存储库地址：https://github.com/Playfish/cht10_node.git&lt;/p&gt;

&lt;p&gt;随后一路按下回车为默认选项。直到遇到输入用户名、密码为止，在此过程中会遇到很多次输入账号密码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/release_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入github账号密码，回车。
&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/release_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;产生debian配置文件：y&lt;/p&gt;

&lt;p&gt;输入当前github用户名密码继续。
&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/release_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;产生debian包后，输入用户名密码发布tag。
&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/release_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;编辑当前ROS包另一个配置，文档配置以及版本状态，输入默认即可。&lt;/p&gt;

&lt;p&gt;注意：turn on pull request testing选择默认为N，如果选择y需要额外配置，不需要打开，我这里是为以后做准备。&lt;/p&gt;

&lt;p&gt;额外的配置查看：https://github.com/ros/rosdistro/pull/17576&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/release_6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;向rosdistro存储库的kinetic目录下的分布式文件添加当前包内容。&lt;/p&gt;

&lt;p&gt;随后向rosdistro存储库提交请求，输入当前github账号密码。
&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/release_7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;生成请求日志。
&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/release_8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完成后，将提示已经发布完成请求，大家可以点击最后的链接查看当前请求。&lt;/p&gt;
&lt;h2 id=&quot;确认工作&quot;&gt;确认工作&lt;/h2&gt;

&lt;p&gt;请求完成后，大家打开之前创建的空白发布存储库，可以看到已经生成了很多生成deb包的规则文件，例如我的：&lt;/p&gt;

&lt;p&gt;https://github.com/Playfish/cht10_node_release.git&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/cht10_release_fill.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大家可以到https://github.com/ros/rosdistro/pulls，查看发布情况。
&lt;img src=&quot;/img/in-post/release-ros1-into-rosdistro/report_rosdistro.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果一切正常，ROS维护人员将合并当前请求，合并完成后。&lt;/p&gt;

&lt;p&gt;到 讨论论坛中https://discourse.ros.org/查看当前版本下的包迭代情况，一般为一个月ROS包版本迭代一次。&lt;/p&gt;

&lt;p&gt;迭代完成后，可以看到自己的包已经存放到了http://packages.ros.org下。&lt;/p&gt;

&lt;p&gt;使用apt-get update 更新后，可以下载自己的包了，比如我的包可以用如下命令下载：&lt;/p&gt;

&lt;p&gt;sudo  apt-get  install  ros-kinetic-cht10-node&lt;/p&gt;

&lt;p&gt;ROS包的发布过程这一节告一段落，下一步讲述如何&lt;a href=&quot;https://blog.csdn.net/u011118482/article/details/80041201&quot;&gt;编辑cht10_node生成的wiki文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;注意，如果要生成wiki文档，需要在package.xml里面添加url指向wiki。&lt;/p&gt;

</description>
        <pubDate>Sun, 22 Apr 2018 10:48:13 -0700</pubDate>
        <link>http://localhost:4000/2018/04/22/releaseros1-into-rosdistro/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/22/releaseros1-into-rosdistro/</guid>
        
        <category>ROS1</category>
        
        <category>Release</category>
        
        
      </item>
    
  </channel>
</rss>
